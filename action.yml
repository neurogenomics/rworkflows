name: 'rworkflows'
description: >
  rworkflows: Full workflow to test, document, and deploy R packages.
author: 'Brian M. Schilder'
branding:
  icon: check-square
  color: green
inputs: 
  run_bioccheck:
    description: >
      Run Bioconductor checks. Must pass in order to continue workflow.
    default: true
  run_rcmdcheck:
    description: >
      Run R CMD checks. Must pass in order to continue workflow.
    default: true
  as_cran:
    description: >
      When running R CMD checks, use the '--as-cran' flag to apply CRAN standards.
  run_vignettes:
    description: >
      Build and check R package vignettes.
    default: true
  run_covr:
    description: >
      Run code coverage tests and publish results to Codecov.
    default: true
  run_pkgdown:
    description: >
      Knit the README.Rmd (if available), build documentation website,
      and deploy to gh-pages branch.
    default: true
  has_testthat:
    description: >
      Run unit tests with the `testthat` package and report the results.
      Requires a subdirectory named 'tests'.
    default: true
  has_runit: 
    description: >
      Run unit tests with the `RUnit` package.
      Requires a subdirectory named 'unitTests'.
    default: false 
  has_latex:
    description: >
      Install a suite of LaTeX dependencies used for rendering Sweave (.rnw)
      and other documentation files.
    default: false
  tinytex_installer:
    description: >
      Which release of tinytex (bundles of LaTeX packages) to use.
      All options can be found here: https://github.com/rstudio/tinytex-releases/
      Note, 'TinyTeX-2' is only available for 'tinytex_version: daily'.
    default: 'TinyTeX-1'
  tinytex_version:
    description: >
      Which version of tinytext to use. 
      When set to '', uses the latest daily build.
      All versions can be found here: https://github.com/rstudio/tinytex-releases/releases
    default: ''
  pandoc_version:
    description: >
      Which version of pandoc to use. 
      For details see here: https://github.com/r-lib/actions/tree/v2-branch/setup-pandoc
    default: '2.19'
  run_docker: 
    description: >
      Whether to build and push a Docker container to DockerHub.
    default: false
  docker_registry: 
    description: >
      Docker container registry to push to. 
      Options include:
      - ghcr.io : GitHub Container Registry (https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)
      - docker.io : DockerHub (https://hub.docker.com/) 
    default: 'ghcr.io'
  docker_user: 
    description: >
      Docker registry username. 
      Not used when `docker_registry="ghcr.io"`.
  docker_org: 
    description: >
      Docker registry organization name. Can be the same as `docker_user`.
      Not used when `docker_registry="ghcr.io"`.
  DOCKER_TOKEN:
    description: >
      Docker registry authentication token.
      Not used when `docker_registry="ghcr.io"`.
  GITHUB_TOKEN:
    description: >
      GitHub authentication token with permissions to push 
      to the R package's GitHub repository. 
      Also used to bypass GitHub download limits.
      By default, uses {{ secrets.GITHUB_TOKEN }}
      which is automatically set up by GitHub. 
      However users can also choose to pass a custom GitHub secret variable
      (e.g. {{ secrets.PAT_GITHUB }}) which allows access to private
      repositories. Read here for more details: 
      https://docs.github.com/en/actions/security-guides/automatic-token-authentication.
  cache_version: 
    description: >
      Which cache version to use. 
      Change this when trying to avoid using previous caches.
    default: cache-v1 
  runner_os:
    description: >
      !!DEPRECATED!!: Uses default variable `runner.os` instead.
      The Operating System (OS) that the workflow is running on.
    default: 'Linux'
  timeout:
    description: >
      The maximum time to wait (in seconds) for long R processes such as  
      dependency installations, downloads, and code checks.
    default: 2000
  miniforge_variant:
    description: >
      If provided, this variant of Miniforge will be downloaded and installed.
      If `miniforge_variant=false`, Miniforge will not be installed at all.
      If `miniforge_variant=""`, the "Miniforge3" variant will be installed.
      If `miniforge_version` is not provided, the `latest` version will be used.
      Currently-known values: - "Miniforge3" (default) - "Miniforge-pypy3" -
      "Mambaforge" - "Mambaforge-pypy3".
      Visit https://github.com/conda-forge/miniforge/releases/ for more 
      information on available variants.
    default: false
  miniforge_version:
    description: >
      If provided, this version of the given Miniforge variant will be
      downloaded and installed. If `miniforge_variant` is not provided,
      `Miniforge3` will be used. Visit
      https://github.com/conda-forge/miniforge/releases/ for more information on
      available versions.
    default: 'latest'
  activate_environment:
    description: >
      Environment name (or path) to activate on all shells. Default is `test`
      which will be created in `$CONDA/envs/test`. If an empty string is used,
      no environment is activated by default (For `base` activation see the
      `auto-activate-base` option). If the environment does not exist, it will
      be created and activated. If `environment-file` is used and you want that
      to be the environment used, you need to explicitely provide the name of
      that environment on `activate-environment`. If using sh/bash/cmd.exe
      shells please read the IMPORTANT! section on the README.md! to properly
      activate conda environments on these shells.
    default: "test"
  environment_file: 
    description: >
      Path or URL to a .yml file to build the conda environment with. 
      For more information see: 
      https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-from-an-environment-yml-file
    default: ''
  channels: 
    description: >
      Conda configuration. Comma separated list of channels to use in order of
      priority. See
      https://docs.conda.io/projects/conda/en/latest/user-guide/configuration/
      for more information.
    default: '' 
  free_diskspace:
    description: >
      Free up additional disk space by deleting non-essential sofwares.
    default: false

runs:
  using: 'composite'
  steps:
    - name: 🔭 Collect Workflow Telemetry 
      uses: runforesight/workflow-telemetry-action@v1
      continue-on-error: true
      with:
        github_token: ${{ inputs.GITHUB_TOKEN }}
        comment_on_pr: false
        
    - name: 💾 Free Disk Space
      if: inputs.free_diskspace == 'true' && runner.os == 'Linux'
      uses: jlumbroso/free-disk-space@main
      
    - name: 🌎 Set environment variables 
      run: | 
        echo "RGL_USE_NULL=TRUE" >> $GITHUB_ENV
        echo "R_REMOTES_NO_ERRORS_FROM_WARNINGS=${{ true }}" >> $GITHUB_ENV
        echo "RSPM=${{ matrix.config.rspm }}" >> $GITHUB_ENV
        echo "TZ=UTC" >> $GITHUB_ENV
        echo "NOT_CRAN=${{ !inputs.as_cran }}" >> $GITHUB_ENV
      shell: bash {0}
    
    - name: 🐍 Setup Miniconda
      if: inputs.miniforge_variant != 'false'
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: false
        python-version: ${{ matrix.python-version }}
        miniforge-variant: ${{ inputs.miniforge_variant }}
        miniforge-version: ${{ inputs.miniforge_version }}
        activate-environment: ${{ inputs.activate_environment }}
        environment-file: ${{ inputs.environment_file }}
        channels: ${{ inputs.channels }}
    
    ## Set the R library to the directory matching the
    ## R packages cache step further below when running on Docker (Linux).
    - name: 📚 Set R library home on Linux 
      if: runner.os == 'Linux'
      run: |
        mkdir -p /__w/_temp/Library
        echo ".libPaths('/__w/_temp/Library')" >> ~/.Rprofile
        git config --global --add safe.directory '*'
      shell: bash {0} 
      
    - name: ⏬ Checkout repository 
      uses: actions/checkout@v4
    
    ## R/Bioc are already installed on the Bioc Docker container, 
    ## and reinstalling them causes errors.
    - name: 🛠 Setup R and Bioconductor 
      if: runner.os != 'Linux'
      uses: grimbough/bioc-actions/setup-bioc@v1
      with:
        bioc-version: ${{ matrix.config.bioc }}

    ## pandoc is already included in the Bioconductor docker images
    - name: 🛠 Install Pandoc 
      if: inputs.pandoc_version != 'false' && runner.os != 'Linux'
      uses: r-lib/actions/setup-pandoc@v2
      with: 
        pandoc-version: ${{ inputs.pandoc_version }} 
    
    - name: ❔ Query dependencies 
      env: 
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE) 
        if(!require("remotes", quietly=TRUE)) install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
      shell: Rscript {0}
    
    - name: 🛠🔀 Install rworkflows R package
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE)
        if(!require("rworkflows", quietly=TRUE)) remotes::install_github("neurogenomics/rworkflows@dev", upgrade=TRUE)
      shell: Rscript {0}

    - name: 🏦 Restore R package cache 
      if: |
        !contains(github.event.head_commit.message, '[nocache]') && runner.os != 'Linux'
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ inputs.cache_version }}-${{ runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ inputs.cache_version }}-${{ runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

    - name: 🏦 Cache R packages on Linux 
      if: |
        !contains(github.event.head_commit.message, '[nocache]') && runner.os == 'Linux'
      uses: actions/cache@v3
      with:
        path: /home/runner/work/_temp/Library
        key: ${{ inputs.cache_version }}-${{ runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ inputs.cache_version }}-${{ runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

    - name: 🛠 Install Linux system dependencies  
      if: runner.os == 'Linux'
      run: |
        sysreqs=$(Rscript -e 'rworkflows::dependencies_linux()')
        sudo -s eval "$sysreqs"
      shell: bash {0}

    - name: 🛠 Install macOS system dependencies 
      if: runner.os == 'macOS'
      run: |
        sysreqs=$(Rscript -e 'rworkflows::dependencies_macos()')
        eval "$sysreqs"
        ### Set up xml2 ###
        echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV
      shell: bash {0}

    - name: 🛠 Install Windows system dependencies 
      if: inputs.has_latex == 'true' && runner.os == 'Windows'
      run: |
        npm install curl
      shell: pwsh {0}
      
    - name: 🛠 Install LaTeX 
      if: inputs.has_latex == 'true'
      uses: r-lib/actions/setup-tinytex@v2
      env: 
        TINYTEX_INSTALLER: ${{ inputs.tinytex_installer }}
        TINYTEX_VERSION: ${{ inputs.tinytex_version }}

    - name: 🛠 Install LaTeX packages 
      if: inputs.has_latex == 'true'
      env:
        tinytex_installer: ${{ inputs.tinytex_installer }}
        tinytex_version: ${{ inputs.tinytex_version }}
      run: | 
        if(!require("tinytex",quietly=TRUE)) install.packages("tinytex")
        rworkflows::dependencies_latex()
      shell: Rscript {0} 

    - name: 🛠 Install dependencies pass 1 
      env:
        timeout: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
         options(crayon.enabled = TRUE, timeout=Sys.getenv("timeout")) 
         message(paste('****', Sys.time(), 'pass number 1 at installing dependencies****'))
         repos <- BiocManager::repositories()
         remotes::install_local(repos=repos, dependencies=TRUE, build_vignettes=FALSE, upgrade=TRUE, force=FALSE)
      continue-on-error: true
      shell: Rscript {0}

    - name: 🛠 Install dependencies pass 2 
      env:
        timeout: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE, timeout=Sys.getenv("timeout"))
        message(paste('****', Sys.time(), 'pass number 2 at installing dependencies****'))
        repos <- BiocManager::repositories()
        remotes::install_local(repos=repos, dependencies=TRUE, build_vignettes=FALSE, upgrade=TRUE, force=FALSE)
      shell: Rscript {0} 

    - name: ℹ️ Session info ️
      run: |
        options(width = 100, crayon.enabled = TRUE)
        pkgs <- installed.packages()[,"Package"]
        if(!require("sessioninfo", quietly=TRUE)) install.packages("sessioninfo")
        tryCatch({
          sessioninfo::session_info(pkgs, include_base = TRUE)
        }, error = function(x){utils::sessionInfo()})
      shell: Rscript {0}

    - name: ✅ Run CMD check 
      if: inputs.run_rcmdcheck == 'true'
      env:
        _R_CHECK_CRAN_INCOMING_: false
        RGL_USE_NULL: ${{ env.RGL_USE_NULL }}
        DISPLAY: 99.0
        AS_CRAN: ${{ inputs.as_cran }}
        run_vignettes: ${{ inputs.run_vignettes }}
        timeout: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE, timeout=Sys.getenv("timeout"))
        if(!require("rcmdcheck",quietly=TRUE)) install.packages("rcmdcheck")
        as_cran <- if(Sys.getenv("AS_CRAN")=='true') "--as-cran" else NULL
        run_build_vignettes <- if(Sys.getenv("run_vignettes")=='true') NULL else "--no-build-vignettes"
        run_vignettes <- if(Sys.getenv("run_vignettes")=='true') NULL else "--ignore-vignettes"
        rcmdcheck::rcmdcheck(
            args = c("--no-manual", "--timings", as_cran, run_vignettes),
            build_args = c("--no-manual", "--keep-empty-dirs", "--no-resave-data", run_build_vignettes),
            error_on = "warning",
            check_dir = "check")
      shell: Rscript {0}
        
    - name: 📋 Reveal testthat details 
      if: inputs.has_testthat == 'true'
      run: |
        find . -name testthat.Rout -exec cat '{}' ';'
      shell: bash {0}
        
    - name: 📋 Run RUnit tests (via BiocGenerics) 
      if: inputs.has_runit == 'true'
      env:
        timeout: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE, timeout=Sys.getenv("timeout"))
        if(!require("BiocGenerics",quietly=TRUE)) BiocManager::install("BiocGenerics")
        BiocGenerics:::testPackage()
      shell: Rscript {0}
        
    - name: ✅ Run BiocCheck 
      if: inputs.run_bioccheck == 'true'
      env:
        DISPLAY: 99.0
        RGL_USE_NULL: ${{ env.RGL_USE_NULL }}
        run_vignettes: ${{ inputs.run_vignettes }}
        as_cran: ${{ inputs.as_cran }}
        timeout: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE, timeout=Sys.getenv("timeout"))
        #### Install deps ####
        if(!require("BiocCheck",quietly=TRUE)) BiocManager::install("BiocCheck")
        #### Allow for packages on CRAN ####
        no_check_vignettes <- Sys.getenv("run_vignettes")=='true'
        as_cran <- Sys.getenv("as_cran")=='true'
        #### Run checks ####
        BiocCheck::BiocCheck(
            dir('check', 'tar.gz$', full.names = TRUE),
            `quit-with-status` = TRUE,
            `no-check-R-ver` = TRUE,
            `no-check-vignettes` = no_check_vignettes,
            `no-check-CRAN` = as_cran,
            `no-check-bioc-help` = as_cran)
      shell: Rscript {0}
    
    - name: 📋 Test coverage 
      if: inputs.run_covr == 'true' && runner.os == 'Linux'
      env: 
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        if(!require("covr",quietly=TRUE)) install.packages("covr")
        covr::codecov()
      shell: Rscript {0} 
      
    - name: 🛠 Install package ️
      if: inputs.run_pkgdown == 'true' && runner.os == 'Linux'
      run: R CMD INSTALL .
      shell: bash {0}

    - name: 📦 Render README 
      if: inputs.run_pkgdown == 'true' && runner.os == 'Linux'
      env:
        DISPLAY: 99.0
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        if(file.exists("README.Rmd")){
          options(crayon.enabled = TRUE)
          if(!require("rmarkdown",quietly=TRUE)) install.packages("rmarkdown");
          rmarkdown::render("README.Rmd", output_format = rmarkdown::github_document(html_preview = FALSE));
        }
      shell: Rscript {0} 
        
    - name: 📦 Build pkgdown site 
      if: inputs.run_pkgdown == 'true' && runner.os == 'Linux'
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        options(crayon.enabled = TRUE)
        if(!require("pkgdown",quietly=TRUE)) install.packages("pkgdown")
        pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
      shell: Rscript {0}
        
    - name: 📦🚀 Deploy pkgdown site to GitHub pages 
      if: inputs.run_pkgdown == 'true' && runner.os == 'Linux'
      uses: JamesIves/github-pages-deploy-action@releases/v4
      with:
        clean: false
        branch: gh-pages
        folder: docs
        token: ${{ inputs.GITHUB_TOKEN }}

    - name: ⏫ Upload check results 
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-results
        path: check 
        
    ## DockerHub steps 
    - name: ℹ️ Get R package info 
      if: runner.os == 'Linux'
      run: |
        #### DockerHub repos must be lowercase (,,) ####
        name=$(grep '^Package:' DESCRIPTION | cut -d\   -f2)
        echo "packageName=${name,,}" >> $GITHUB_ENV
        echo "packageNameOrig=${name}" >> $GITHUB_ENV 
        version=$(grep Version DESCRIPTION | grep -o "[0-9.]\+")
        echo "packageVersion=${version}" >> $GITHUB_ENV 
      shell: bash {0}
      
    - name: 🐳✏️ Create Docker file 
      if: |
        (!contains(github.event.head_commit.message, '[nodocker]')) && inputs.run_docker == 'true' && runner.os == 'Linux'
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        BASE_IMAGE: ${{ matrix.config.cont }}
        timeout: ${{ inputs.timeout }}
      run: |
        path <- rworkflows::use_dockerfile(base_image=Sys.getenv("BASE_IMAGE"),
                                           timeout=Sys.getenv("timeout"))
      shell: Rscript {0} 
      
    - name: 🐳🚀 Build and push to GHCR 
      if: |
        (!contains(github.event.head_commit.message, '[nodocker]')) && inputs.run_docker == 'true' && runner.os == 'Linux' && inputs.docker_registry == 'ghcr.io'
      uses: docker/build-push-action@v1
      env: 
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        username: ${{ github.repository_owner }}
        password: ${{ inputs.GITHUB_TOKEN }}
        registry: ${{ inputs.docker_registry }}
        repository: ${{ github.repository_owner }}/${{ env.packageName }}
        tag_with_ref: true
        tag_with_sha: false
        tags: |
          ${{ env.packageVersion }},
          latest
        build_args: |
          PKG=${{ env.packageNameOrig }}
          
    - name: 🐳🚀 Build and push to DockerHub 
      if: |
        (!contains(github.event.head_commit.message, '[nodocker]')) && inputs.run_docker == 'true' && runner.os == 'Linux' && inputs.docker_registry == 'docker.io'
      uses: docker/build-push-action@v1
      env: 
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        username: ${{ inputs.docker_user }}
        password: ${{ inputs.DOCKER_TOKEN }}
        repository: ${{ inputs.docker_org }}/${{ env.packageName }}
        tag_with_ref: true
        tag_with_sha: false
        tags: |
          ${{ env.packageVersion }},
          latest
        build_args: |
          PKG=${{ env.packageNameOrig }}
