use_vignette_docker("neurogenomics",force_new = T)
cont
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
paste("https://ghcr.io",cont,sep="/")
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
res=readRDS(here::here("reports","dep_graph_res.rds"))
res
res$plot
print(res$plot)
print(res$graph)
res$plot
visNetwork::visNetwork(res$plot)
browseURL(here::here("reports","rworkflows_depgraph.html"))
?echodeps::visnet_save
echodeps::visnet_save
url = here::here("reports","rworkflows_depgraph.html")
url
rworkflows::use_workflow(template = "rworkflows_static:dev")
rworkflows::use_workflow(template = "rworkflows_static:dev", force_new = T)
.Platform$OS.type != "windows"
rworkflows::use_workflow(template = "rworkflows_static:dev", force_new = T)
devtools::check_man()
devtools::check_man()
library(rworkflows)
rworkflows::use_workflow(template = "rworkflows_static:dev", force_new = T)
BiocCheck::BiocCheck()
?BiocCheck::BiocCheck()
as_cran=T
BiocCheck::BiocCheck(`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
BiocCheck::BiocCheck(`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
devtools::check_man()
BiocCheck::BiocCheck(`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
Sys.getenv("CONDA_EXE")
reticulate::conda_binary()
reticulate::conda_exe()
?reticulate::conda_exe
conda <- reticulate::conda_binary()
devtools::check_man()
infer_deps()
?renv::dependencies
path = here::here("DESCRIPTION")
devoptera::args2vars(infer_deps, reassign = TRUE)
#### Check for packages that appear in multiple fields ####
overlap <- intersect(imports, suggests)
if(length(overlap)>0){
stp <- paste(
"R packages cannot be in both Imports and Suggests",
"Please ensure the following packages only appear",
"in one of the two fields:",
paste("\n - ",shQuote(overlap))
)
stop(stp)
}
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
path
path = here::here("DESCRIPTION")
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
dat
#### Remove "R" ####
dat <- subset(dat, Package!="R")
dfile <- grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
dfile
#### Remove the names of the package itself ####
if(length(dfile)>0){
if(file.exists(dfile)){
pkg <- get_description(paths = dfile,
use_repos = FALSE)[[1]]$get_field(key = "Package")
} else {
pkg <- basename(dirname(dfile))
}
dat <- subset(dat, Package!=pkg)
}
counts <- sort(table(dat$Package), decreasing = TRUE)
#### Get Imports ####
imports_all <- unique(
c(names(counts)[counts>=imports_thresh],
imports)
)
## Remove user-specified suggests
imports_all <- imports_all[!imports_all %in% suggests]
#### Get Suggests ####
suggests_all<- unique(
c(names(counts)[!names(counts) %in% imports_all],
suggests
)
)
deps <- list(Imports=imports_all,
Suggests=suggests_all)
if(isTRUE(add_newlines)){
deps <- lapply(deps, function(x){paste0("\n  ",x)})
}
#### Return ####
if(length(which)==1){
return(deps[[which]])
} else {
return(deps[which])
}
deps[[which]]
which
devtools::document()
library(rworkflows)
devtools::check_man()
library(rworkflows)
devtools::check_man()
usethis::use_test()
usethis::use_test()
#' #### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
utils::download.file(url,path)
deps <- infer_deps()
deps <- infer_deps(path = path)
#   'biocViews','data.table','renv','shiny','htmltools'
# )
# suggests <- c(
#   'testthat','rmarkdown','remotes','covr','echodeps',
#   'igraph','knitr','markdown','methods'
# )
# testthat::expect_equal(sort(deps$Imports),
#                        sort(imports))
# testthat::expect_equal(sort(deps$Suggests),
#                        sort(suggests))
suggests <- c("covr","knitr","markdown","remotes","rmarkdown","testthat")
testthat::expect_true(all(suggests %in% deps$Suggests))
#### Return just one output ####
deps2 <- infer_deps(path = path,
which = "Imports")
testthat::expect_false(is.list(deps2))
#### Conflicting inputs ####
testthat::expect_error(
infer_deps(path = path,
imports = "markdown",
suggests = "markdown")
)
read.dcf("../DESCRIPTION", fields = "URL")[1]
read.dcf("DESCRIPTION", fields = "URL")[1]
get_github_url_desc()
get_github_url_desc(desc_file = read.dcf("../DESCRIPTION", fields = "URL")[1])
get_github_url_desc("../DESCRIPTION")
get_github_url_desc("DESCRIPTION")
read.dcf("../DESCRIPTION")
read.dcf("DESCRIPTION", fields = "URL")[1]
read.dcf("DESCRIPTION", fields = "BugReports")[1]
Sys.getenv()
## Infer docker_org from DESCRIPTION
desc_file <- get_description()
desc_file
get_github_url_desc(desc_file = desc_file)
desc_file
get_github_url_desc(desc_file = here::here("DESCRIPTION"),
verbose = verbose)
get_github_url_desc(desc_file = here::here("DESCRIPTION"))
## Infer docker_org from DESCRIPTION
desc_file <- get_description()
get_github_url_desc(desc_file = desc_file[[1]])
strsplit(gh_url,"/")[[1]][2]
gh_url <- get_github_url_desc(desc_file = desc_file[[1]])
strsplit(gh_url,"/")[[1]][2]
gh_url
strsplit(gh_url,"/")[[1]]
rev(strsplit(gh_url,"/")[[1]])[2]
source("~/Desktop/rworkflows/R/infer_docker_org.R", echo=TRUE)
usethis::use_test()
infer_docker_org(docker_org = NULL)
infer_docker_org(docker_org = NULL, docker_registry = "ghcr.io")
infer_docker_org(docker_org = NULL,
docker_registry = "docker.io")
docker_org <- "neurogenomics"
docker_org <- "neurogenomicslab"
infer_docker_org(docker_org = docker_org,
docker_registry = "docker.io")
devtools::check_man()
library(rworkflows)
system.file("templates","devcontainer.json",package="rworkflows")
yaml::read_yaml(system.file("templates","devcontainer.json",package="rworkflows"))
path <- system.file("templates","devcontainer.json",package="rworkflows")
tmp <- system.file("templates","devcontainer.json",package="rworkflows")
requireNamespace("jsonlite")
jsonlite::read_json(tmp)
jsn <- jsonlite::read_json(tmp)
jsn$features
is(jsn$features)
names(jsn$features)
list(
"ghcr.io/devcontainers/features/conda:1"
),
list(
"ghcr.io/devcontainers/features/conda:1"
)
list(
"ghcr.io/devcontainers/features/conda:1"=NULL
)
devoptera::args2vars(use_codespace)
jsn$features
jsn$features==features
features
devoptera::args2vars(use_codespace)
jsn$features==features
}
features
jsn$features
list()
list() |> names(`ghcr.io/devcontainers/features/conda:1`)
list() |> `names<-`(`ghcr.io/devcontainers/features/conda:1`)
list() |> `names<-`("ghcr.io/devcontainers/features/conda:1")
list() |> `names<-`(c("ghcr.io/devcontainers/features/conda:1"))
features=list(
"ghcr.io/devcontainers/features/conda:1"=list()
)
features
jsn$features==features
jsn$features
features
features
jsn$features <- features
jsn
jsn
jsn$features
customizations
jsn$customizations
customizations=list(
vscode=list(
settings=list(
extensions=
c("reditorsupport.r",
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
)
customizations
jsn$customizations
customizations=list(
settings=list(),
vscode=list(
extensions=
c("reditorsupport.r",
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
customizations
jsn$customizations
customizations=list(
vscode=list(
settings=list(),
extensions=
c("reditorsupport.r",
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
customizations
jsn$customizations
customizations=list(
vscode=list(
settings=list(),
extensions=
list("reditorsupport.r",
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
customizations
jsn$customizations
cat(paste(readLines(path),collapse ="\n"))
devtools::check_man()
library(rworkflows)
usethis::use_test()
library(rworkflows)
path <- use_codespace(save_dir=tempdir())
testthat::expect_true(file.exists(path))
jsonlite::read_json(path)
jsn <- jsonlite::read_json(path)
names(jsn)
testthat::expect_true(
all(c("image","features","customizations") %in% names(jsn))
)
devtools::check_man()
file.edit("Rprofile")
file.edit(".Rprofile")
BiocManager::repositories()
devtools::check_man()
library(rworkflows)
deparse(BiocManager::repositories())
cat(deparse(BiocManager::repositories()))
cont4 <- construct_cont(default_tag = "release",
default_registry = "ghcr.io",
run_check_cont = TRUE)
cont4 <- construct_cont(default_tag = "release",
default_registry = NULL,
run_check_cont = TRUE)
is.null(c("a","b"))
library(rworkflows)
cont4 <- construct_cont(default_tag = "release",
default_registry = NULL,
run_check_cont = TRUE)
devoptera::args2vars(construct_cont)
default_registry
default_registry=NULL
default_registry <- check_registry(registry = default_registry)
#### Remove any trailing : (e.g. when default_tag=NULL) ####
cont <- lapply(cont, function(x){
if(is.null(x)) NULL else trimws(x,whitespace = ":")
})
#### Run QC ####
cont2 <- lapply(cont,function(co){
if(is.null(co)){
return(NULL)
} else if(!grepl("/",co) &&
!is.null(default_cont)){
messager("Only tag name supplied to 'cont'.",
"Assuming default=",shQuote(default_cont),v=verbose)
co <- paste(default_cont,co,sep=":")
} else if(!grepl(":",co) |
!grepl(default_cont,co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[1]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else if(tolower(bioc_version)=="release"){
co <- gsub(":release",":latest",co, ignore.case = TRUE)
}
return(co)
})
#### Add registry ####
if(!is.null(default_registry)){
opts <- eval(formals(construct_cont)$default_registry)
cont2 <- lapply(cont2, function(co){
if(is.null(co)){
return(NULL)
} else if(!grepl(paste(paste0("^",opts),collapse = "|"),co)){
return(paste0(default_registry,co))
} else {
return(co)
}
})
}
#### Check that the Dockerhub repo exists ####
if(isTRUE(run_check_cont)){
check_cont(cont = cont2,
verbose = verbose)
}
default_registry
cont2
cont5 <- construct_cont(default_registry = NULL)
cont5
testthat::expect_equal(cont5[[1]],"bioconductor/bioconductor_docker:latest")
testthat::expect_equal(cont5[[1]],"bioconductor/bioconductor_docker:devel")
testthat::expect_null(cont5[[2]])
testthat::expect_null(cont5[[3]])
#### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
desc::desc(package = "rworkflows")
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "rworkflows")
tmp <- tempfile(fileext = "DESCRIPTION")
writeLines(d,con = tmp)
tmp
d
as.character(tmp)
as.character(d)
cat(d)
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "rworkflows")desc
tmp <- tempfile(fileext = "DESCRIPTION")
d$write(tmp)
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
tmp <- tempfile(fileext = "DESCRIPTION")
d$write(tmp)
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
deps <- infer_deps(path = path)
deps
#' #### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
#' #### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
d
source("~/Desktop/rworkflows/R/infer_docker_org.R", echo=TRUE)
infer_docker_org(docker_org="myorg", docker_registry="ghcr.io")
infer_docker_org( docker_registry="ghcr.io")
source("~/Desktop/rworkflows/R/infer_docker_org.R", echo=TRUE)
infer_docker_org( docker_registry="ghcr.io")
infer_docker_org(docker_org="myorg", docker_registry="ghcr.io")
#### Get example DESCRIPTION file ####
desc <- devtools::as.package("devoptera")$description
#### Get example DESCRIPTION file ####
desc <- devtools::as.package("rworkflows")$description
testthat::expect_error(
infer_docker_org(docker_org = NULL,
docker_registry = "docker.io")
)
out <- infer_docker_org(docker_org = NULL)
out <- infer_docker_org(docker_org = NULL,
docker_registry = ""ghcr.io"")
out <- infer_docker_org(docker_org = NULL,
docker_registry = "ghcr.io")
out
desc::desc(package = "yaml")
d <- desc::desc(package = "yaml")
d
out <- infer_docker_org(docker_org = NULL,
docker_registry = "ghcr.io",
paths=d)
out
devtools::check_man()
library(rworkflows)
run_tests <- function(path){
testthat::expect_true(file.exists(path))
jsn <- jsonlite::read_json(path)
testthat::expect_true(
all(c("image","features","customizations") %in% names(jsn))
)
}
save_dir <- tempdir()
## First time
path <- use_codespace(save_dir=save_dir)
run_tests(path)
## Second time
path2 <- use_codespace(save_dir=save_dir)
run_tests(path2)
## Second time
path2 <- use_codespace(save_dir=save_dir, show=TRUE)
?reticulate::conda_export
devtools::check_man()
library(rworkflows)
get_description()
get_description()$Package
get_description()
get_description()[[1]]$$Package
get_description()[[1]]$Package
get_description()[1]$Package
get_description()[[1]]$Package
get_description()[[1]]
get_description()[[1]]@Package
p=
get_description()[[1]]
names(get_description())
names(get_description())
usethis::use_test()
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
library(rworkflows)
path <- use_vignette_docker(package = "mypackage",
docker_org = "neurogenomics",
## use default save_dir in practice
save_dir = tempdir())
file.edit(path)
path <- use_vignette_docker()
path <- use_vignette_docker(force_new = T)
devtools::check_man()
library(rworkflows)
?|remotes::install_local()
?remotes::install_local()
devtools::check_man()
library(rworkflows)
?bioc_r_versions
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::build_manual()
devtools::build_manual(path = 'inst')
## Bug fixes
testthat::test_check()
testthat::test_check("rworkflows")
?rstatix::anova_test
?rstatix::Anova()
?)
?rstatix::cor_pmat
