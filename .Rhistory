<<<<<<< HEAD
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
customizations
jsn$customizations
customizations=list(
vscode=list(
settings=list(),
extensions=
list("reditorsupport.r",
"visualstudioexptteam.vscodeintellicode",
"ionutvmi.path-autocomplete")
)
)
customizations
jsn$customizations
cat(paste(readLines(path),collapse ="\n"))
devtools::check_man()
library(rworkflows)
usethis::use_test()
library(rworkflows)
path <- use_codespace(save_dir=tempdir())
testthat::expect_true(file.exists(path))
jsonlite::read_json(path)
jsn <- jsonlite::read_json(path)
names(jsn)
testthat::expect_true(
all(c("image","features","customizations") %in% names(jsn))
)
devtools::check_man()
file.edit("Rprofile")
file.edit(".Rprofile")
BiocManager::repositories()
devtools::check_man()
library(rworkflows)
deparse(BiocManager::repositories())
cat(deparse(BiocManager::repositories()))
cont4 <- construct_cont(default_tag = "release",
default_registry = "ghcr.io",
run_check_cont = TRUE)
cont4 <- construct_cont(default_tag = "release",
default_registry = NULL,
run_check_cont = TRUE)
is.null(c("a","b"))
library(rworkflows)
cont4 <- construct_cont(default_tag = "release",
default_registry = NULL,
run_check_cont = TRUE)
devoptera::args2vars(construct_cont)
default_registry
default_registry=NULL
default_registry <- check_registry(registry = default_registry)
#### Remove any trailing : (e.g. when default_tag=NULL) ####
cont <- lapply(cont, function(x){
if(is.null(x)) NULL else trimws(x,whitespace = ":")
})
#### Run QC ####
cont2 <- lapply(cont,function(co){
if(is.null(co)){
return(NULL)
} else if(!grepl("/",co) &&
!is.null(default_cont)){
messager("Only tag name supplied to 'cont'.",
"Assuming default=",shQuote(default_cont),v=verbose)
co <- paste(default_cont,co,sep=":")
} else if(!grepl(":",co) |
!grepl(default_cont,co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[1]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
=======
>>>>>>> master
)
} else {
return(co)
}
} else if(tolower(bioc_version)=="release"){
co <- gsub(":release",":latest",co, ignore.case = TRUE)
}
return(co)
})
#### Add registry ####
if(!is.null(default_registry)){
opts <- eval(formals(construct_cont)$default_registry)
cont2 <- lapply(cont2, function(co){
if(is.null(co)){
return(NULL)
} else if(!grepl(paste(paste0("^",opts),collapse = "|"),co)){
return(paste0(default_registry,co))
} else {
return(co)
}
})
}
#### Check that the Dockerhub repo exists ####
if(isTRUE(run_check_cont)){
check_cont(cont = cont2,
verbose = verbose)
}
default_registry
cont2
cont5 <- construct_cont(default_registry = NULL)
cont5
testthat::expect_equal(cont5[[1]],"bioconductor/bioconductor_docker:latest")
testthat::expect_equal(cont5[[1]],"bioconductor/bioconductor_docker:devel")
testthat::expect_null(cont5[[2]])
testthat::expect_null(cont5[[3]])
#### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
desc::desc(package = "rworkflows")
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "rworkflows")
tmp <- tempfile(fileext = "DESCRIPTION")
writeLines(d,con = tmp)
tmp
d
as.character(tmp)
as.character(d)
cat(d)
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "rworkflows")desc
tmp <- tempfile(fileext = "DESCRIPTION")
d$write(tmp)
#### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
tmp <- tempfile(fileext = "DESCRIPTION")
d$write(tmp)
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
deps <- infer_deps(path = path)
deps
#' #### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
#' #### Get example DESCRIPTION file ####
d <- desc::desc(package = "yaml")
path <- tempfile(fileext = "DESCRIPTION")
d$write(path)
d
source("~/Desktop/rworkflows/R/infer_docker_org.R", echo=TRUE)
infer_docker_org(docker_org="myorg", docker_registry="ghcr.io")
infer_docker_org( docker_registry="ghcr.io")
source("~/Desktop/rworkflows/R/infer_docker_org.R", echo=TRUE)
infer_docker_org( docker_registry="ghcr.io")
infer_docker_org(docker_org="myorg", docker_registry="ghcr.io")
#### Get example DESCRIPTION file ####
desc <- devtools::as.package("devoptera")$description
#### Get example DESCRIPTION file ####
desc <- devtools::as.package("rworkflows")$description
testthat::expect_error(
infer_docker_org(docker_org = NULL,
docker_registry = "docker.io")
)
out <- infer_docker_org(docker_org = NULL)
out <- infer_docker_org(docker_org = NULL,
docker_registry = ""ghcr.io"")
out <- infer_docker_org(docker_org = NULL,
docker_registry = "ghcr.io")
out
desc::desc(package = "yaml")
d <- desc::desc(package = "yaml")
d
out <- infer_docker_org(docker_org = NULL,
docker_registry = "ghcr.io",
paths=d)
out
devtools::check_man()
library(rworkflows)
run_tests <- function(path){
testthat::expect_true(file.exists(path))
jsn <- jsonlite::read_json(path)
testthat::expect_true(
all(c("image","features","customizations") %in% names(jsn))
)
}
save_dir <- tempdir()
## First time
path <- use_codespace(save_dir=save_dir)
run_tests(path)
## Second time
path2 <- use_codespace(save_dir=save_dir)
run_tests(path2)
## Second time
path2 <- use_codespace(save_dir=save_dir, show=TRUE)
?reticulate::conda_export
devtools::check_man()
library(rworkflows)
get_description()
get_description()$Package
get_description()
get_description()[[1]]$$Package
get_description()[[1]]$Package
get_description()[1]$Package
get_description()[[1]]$Package
get_description()[[1]]
get_description()[[1]]@Package
p=
get_description()[[1]]
names(get_description())
names(get_description())
usethis::use_test()
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
library(rworkflows)
path <- use_vignette_docker(package = "mypackage",
docker_org = "neurogenomics",
## use default save_dir in practice
save_dir = tempdir())
file.edit(path)
path <- use_vignette_docker()
path <- use_vignette_docker(force_new = T)
devtools::check_man()
library(rworkflows)
?|remotes::install_local()
?remotes::install_local()
devtools::check_man()
library(rworkflows)
?bioc_r_versions
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::build_manual()
devtools::build_manual(path = 'inst')
## Bug fixes
testthat::test_check()
testthat::test_check("rworkflows")
?rstatix::anova_test
?rstatix::Anova()
?)
?rstatix::cor_pmat
cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))')
cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))
cat("apt-get update -y && apt-get install -y",
paste(gsub("apt-get install -y ", "",
remotes::system_requirements("ubuntu", "20.04")),
collapse = " "))
remotes::system_requirements("ubuntu", "20.04")
paste(gsub("apt-get install -y ", "",
remotes::system_requirements("ubuntu", "20.04"))
paste(gsub("apt-get install -y ", "",
paste(gsub("apt-get install -y ", "",
remotes::system_requirements("ubuntu", "20.04")),
collapse = " ")
?remotes::system_requirements
req <- paste(gsub("apt-get install -y ", "",
remotes::system_requirements(os = os,
os_release = os_release)),
collapse = " ")
devoptera::args2vars(system_requirements)
source("~/.active-rstudio-document", echo=TRUE)
devoptera::args2vars(system_requirements)
deps <- unique(c(deps,extra))
# devoptera::args2vars(system_requirements)
deps <- paste(gsub("apt-get install -y ", "",
remotes::system_requirements(os = os,
os_release = os_release)),
collapse = " ")
deps <- unique(c(deps,extra))
deps
cmd=paste("apt-get update -y",
"apt-get install -y",
sep="&&")
cmd
paste("apt-get update -y",
"apt-get install -y",
sep="&&",
collapse=" ")
paste("apt-get update -y",
"apt-get install -y",
sep="&&",
collapse=" ")
cmd=paste("apt-get update -y",
"apt-get install -y",
sep=" && ")
cmd
paste(cmd,deps,sep=" ")
deps
# devoptera::args2vars(system_requirements)
deps <- gsub("apt-get install -y ", "",
remotes::system_requirements(os = os,
os_release = os_release)
deps <- unique(c(deps,extra))
# devoptera::args2vars(system_requirements)
deps <- gsub("apt-get install -y ", "",
remotes::system_requirements(os = os,
os_release = os_release))
deps
deps <- unique(c(deps,extra))
paste(cmd,paste(deps,collapse = " "),sep=" ")
cat(cmd)
source("~/Desktop/rworkflows/R/system_dependencies.R", echo=TRUE)
system_dependencies()
source("~/Desktop/rworkflows/R/system_dependencies.R", echo=TRUE)
system_dependencies(prefix = NULL)
devtools::check_man()
devtools::check_man()
library(rworkflows)
paste(prefix,paste(cask,collapse=" "),"--cask")
devoptera::args2vars(macos_dependencies)
source("~/Desktop/rworkflows/R/macos_dependencies.R", echo=TRUE)
devoptera::args2vars(macos_dependencies)
source("~/Desktop/rworkflows/R/macos_dependencies.R", echo=TRUE)
devoptera::args2vars(macos_dependencies)
source("~/Desktop/rworkflows/R/macos_dependencies.R", echo=TRUE)
macos_dependencies()
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
usethis::use_test()
cmd <- dependencies_macos
cmd <- dependencies_macos()
cmd
cmd <- utils::capture.output(
dependencies_macos()
)
cmd
testthat::expect_true(grepl("^brew install",cmd))
usethis::use_test()
cmd <- utils::capture.output(
dependencies_windows()
)
cmd
testthat::expect_true(grepl("^npm install",cmd))
usethis::use_test()
cmd <- utils::capture.output(
dependencies_linux()
)
cmd
cmd <- utils::capture.output(
dependencies_linux()
)
testthat::expect_true(grepl("^apt-get update",cmd))
?remotes::install_github()
rworkflows::dependencies_linux()
library(rworkflows)
dependencies_linux()
usethis::use_test()
dependencies_linux(package="rworkflows")
require("tinytex",quietly=TRUE)
dependencies_linux(package="rworkflows")
?install.packages()
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
remotes::system_requirements()
remotes::system_requirements("ubuntu","20.04")
remotes::system_requirements("ubuntu","20.04", package = NULL)
usethis::use_test()
deps <- dependencies_latex(install=FALSE)
length(deps)
testthat::expect_gte(length(deps),20)
deps <- dependencies_latex(install=TRUE)
devtools::check_man()
deps
testthat::expect_equal(deps,0)
?remotes::system_requirements
package = "remotes"
dependencies_linux(package="rworkflows")
usethis::use_test()
usethis::use_test()
devtools::check_man()
library(rworkflows)
gha_python_versions()
rworkflows:::gha_python_versions
rworkflows:::gha_python_versions()
remotes::system_requirements(os = "ubuntu",os_release = "22.04")
remotes::system_requirements(os = "ubuntu",os_release = "latest")
devtools::check_man()
library(rworkflows)
BiocStyle::html_document
?BiocStyle::html_document
devtools::check_man()
library(rworkflows)
library(rworkflows)
remotes::install_github("neurogenomics/rworkflows@dev", upgrade=TRUE)
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir(), preview = T)
library(rworkflows)
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir(), preview = T)
library(rworkflows)
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir(), preview = T)
rworkflows::dependencies_macos()
BiocStyle::latex()
log=BiocStyle::latex()
log$width
options(download.file.method="libcurl", crayon.enabled=TRUE, timeout=Sys.getenv("timeout")); \
options(download.file.method="libcurl", crayon.enabled=TRUE, timeout=Sys.getenv("timeout"));
if(!require("BiocManager",quietly=TRUE)) install.packages("BiocManager");
repos <- BiocManager::repositories();
remotes::install_local(repos=repos, dependencies=TRUE, build_vignettes=FALSE, upgrade=TRUE, force=TRUE);
Sys.getenv("timeout")
options(download.file.method="libcurl", crayon.enabled=TRUE, timeout=Sys.getenv("timeout"));
BiocManager::repositories()
options("timeout")
options("timeout")
2000/60
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
path <- use_dockerfile(save_dir=tempdir(), preview = T)
library(rworkflows)
path <- use_dockerfile(save_dir=tempdir(), preview = T)
## Use default save_dir in practice
vignette1 <- rworkflows::use_vignette_getstarted(package = "mypackage",
save_dir = tempdir())
devtools::check_man()
library(rworkflows)
BiocManager::version()
devtools::document()
library(rworkflows)
devtools::check_man()
library(rworkflows)
path <- use_workflow(save_dir = file.path(tempdir(),".github","workflows"), preview = T)
grepl("ghcr.io","ghcr")
grepl("ghcr.io","ghcr.io")
grepl("ghcr.io","ghcr.io22")
remotes::install_github("r-lib/remotes", upgrade = TRUE)
?echoLD::get_LD()
?rworkflows::dependencies_linux
dependencies_linux(package="rworkflows")
dependencies_linux(package="rworkflows", prefix = NULL)
# devoptera::args2vars(linux_dependencies)
extra2= c("git-core",
"libcurl4-openssl-dev",
"libgit2-dev",
"libicu-dev",
"libssl-dev",
"make",
"pandoc" ,
"pandoc-citeproc" ,
"zlib1g-dev" ,
"xfonts-100dpi",
"xfonts-75dpi" ,
"biber" ,
"libsbml5-dev" ,
"qpdf" ,
"cmake")
deps=dependencies_linux(package="rworkflows", prefix = NULL)
deps
deps=strsplit("git zlib1g-dev make libssl-dev libgit2-dev libcurl4-openssl-dev qpdf rsync"," ")
deps
deps=strsplit("git zlib1g-dev make libssl-dev libgit2-dev libcurl4-openssl-dev qpdf rsync"," ")[[1]]
setdiff(extra2,deps)
intersect(extra2,deps)
devtools::check_man()
devtools::check_man()
library(rworkflows)
library(rworkflows)
devtools::check_man()
library(rworkflows)
library(rworkflows)
devtools::check_man()
library(rworkflows)
usethis::use_test()
#### prefix=NULL ####
deps <- dependencies_linux(package="rworkflows", prefix=NULL)
deps
testthat::expect_true(length(deps)>10)
?BiocManager::install()
2500/3
<<<<<<< HEAD
=======
devtools::check_man()
library(rworkflows)
testthat::skip_on_cran()
?testthat::skip_on_cran()
testthat::skip_if_offline()
devtools::check_man()
library(rworkflows)
devtools::build_manual()
devtools::build_manual(path = "inst/")
?rworkflows::construct_runners()
?rworkflows::construct_runners(  bioc = list("release", "release", "release"),
)
rworkflows::construct_runners(  bioc = list("release", "release", "release"),
)
rworkflows::construct_cont()
rworkflows::construct_cont(default_tag = "release")
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
library(rworkflows)
?testthat::skip_on_cran()
testthat::skip_if_offline()
readLines("https://hub.docker.com/v2/repositories//bioconductor/bioconductor_docker/tags?page_size=1000")
devtools::check_man()
devtools::install_dev_deps()
devtools::install_dev_deps()
gh::gh_token()
file.edit("~/.Renviron")
credentials::set_github_pat()
gh::gh_token()
devtools::install_dev_deps()
credentials::set_github_pat()
devtools::install_dev_deps()
devtools::build()
devtools::check_man()
version
version
install.packages("devtools")
install.packages("BiocManager")
install.packages("devtools")
devtools::install_dev_deps()
devtools::check_man()
install.packages("roxygen2")
devtools::check_man()
devtools::install_dev_deps()
packageVersion("roxygen2")
version
version
version()
version()
version
rworkflows::use_workflow()
rworkflows::use_workflow(force_new = T)
gh::gh_token()
credentials::set_github_pat()
a1 <- construct_authors()
library()
library(rworkflows)
a1 <- construct_authors()
testthat::expect_equal(as.character(a1), "yourGivenName yourFamilyName <yourEmail@email.com> [cre] (yourOrcidId)")
a2 <- construct_authors(authors = "Test 1, Test1")
testthat::expect_equal(as.character(a2), "Test 1, Test1")
testthat::expect_equal(as.character(a1), "yourGivenName yourFamilyName <yourEmail@email.com> [cre] (yourOrcidId)")
testthat::expect_true(as.character(a1) %in%
c("yourGivenName yourFamilyName <yourEmail@email.com> [cre] (ORCID: yourOrcidId)",
"yourGivenName yourFamilyName <yourEmail@email.com> [cre] (yourOrcidId)"))
installed.packages()
names(installed.packages())
rownames(installed.packages())
"reticulate" %in% rownames(installed.packages())
credentials::set_github_pat()
remotes::install_github("r-lib/remotes")
devtools::check_man()
devtools::check_man()
path <- use_issue_template(save_dir=tempdir())
>>>>>>> master
